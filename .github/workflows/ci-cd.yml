name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docker/requirements.txt
    - name: Run tests
      run: |
        python -m pytest tests/ --cov=src --cov-report=term-missing
    - name: Coverage check
      run: |
        python -m pytest tests/ --cov=src --cov-fail-under=67

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Minikube
      uses: medyagh/setup-minikube@v0.0.16
      with:
        minikube-version: 'latest'
        kubernetes-version: 'v1.25.0'
        driver: 'docker'
        memory: '4096mb'
        cpus: '2'
    
    # Alternative 2: Manual Minikube setup
    # - name: Install Minikube
    #   run: |
    #     curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.25.0/minikube-linux-amd64
    #     chmod +x minikube
    #     sudo mv minikube /usr/local/bin/
    # - name: Start Minikube
    #   run: |
    #     minikube start --driver=docker --memory=4096mb --cpus=2 --kubernetes-version=v1.25.0
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        minikube update-context
        kubectl config use-context minikube
    
    - name: Build Docker images in Minikube
      run: |
        eval $(minikube docker-env)
        docker build -f docker/Dockerfile.train -t ml-train:latest .
        docker build -f docker/Dockerfile.serve -t ml-serve:latest .
    
    - name: Install Argo Workflows
      run: |
        kubectl create namespace argo || true
        kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.4.6/install.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/argo-server -n argo
    
    - name: Install Argo CLI
      run: |
        curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.4.6/argo-linux-amd64
        chmod +x argo-linux-amd64
        sudo mv argo-linux-amd64 /usr/local/bin/argo
    
    - name: Trigger Argo Workflow
      run: |
        argo submit ci-cd/argo-workflows/training-pipeline.yaml -n argo --serviceaccount argo